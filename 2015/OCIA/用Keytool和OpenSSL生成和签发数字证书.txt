一）keytool生成私钥文件(.key)和签名请求文件(.csr)，openssl签发数字证书

      J2SDK在目录%JAVA_HOME%/bin提供了密钥库管理工具Keytool，用于管理密钥、证书和证书链。Keytool工具的命令在JavaSE6中已经改变，不过以前的命令仍然支持。Keytool也可以用来管理对称加密算法中的密钥。
最简单的命令是生成一个自签名的证书，并把它放到指定的keystore文件中：

keytool -genkey -alias tomcat -keyalg RSA -keystore c:/mykey

如果c:/mykey文件不存在，keytool会生成这个文件。按照命令的提示，回答一系列问题，就生成了数字证书。注意，公共名称(cn)应该是服务器的域名。这样keystore中就存在一个别名为tomcat的实体，它包括公钥、私钥和证书。这个证书是自签名的。<o:p></o:p>

Keytool工具可以从keystore中导出证书，但是不能导出私钥。对于配置apache这样的服务器，就不太方便。这种情况下就完全用OpenSSL吧，下面将会介绍。不过keytool对于J2EE　AppServer是很有用的，它们就是用keystore存储证书链的。keystore的作用类似于windows存放证书的方式，不过跨平台了，^_^下面用Keytool生成CSR（Certificate Signing Request），并用OpenSSL生成CA签名的证书。

1.    准备
1)    在bin目录下新建目录 demoCA、demoCA/certs、demoCA/certs  、 demoCA/newcerts
2)    在demoCA建立一个空文件 index.txt
3)    在demoCA建立一个文本文件 serial, 没有扩展名，内容是一个合法的16进制数字，例如 0000
4)    配置环境变量PATH，加入%JAVA_HOME%/bin，本文用的JavaSDK1.6

2.    生成CA的自签名证书
openssl req -new -x509 -keyout ca.key -out ca.crt -config openssl.cnf

3.    生成server端证书
1)    生成KeyPair生成密钥对
 keytool -genkey -alias tomcat_server -validity 365 -keyalg RSA -keysize 1024 -keypass 123456  -storepass 123456 -keystore server_keystore
  输入common name时，要和服务器的域名保持一致。
2)    生成证书签名请求
keytool -certreq -alias tomcat_server -sigalg MD5withRSA -file tomcat_server.csr -keypass 123456 -storepass 123456 -keystore server_keystore 
3)    用CA私钥进行签名，也可以到权威机构申请CA签名。
   openssl ca -in tomcat_server.csr -out tomcat_server.crt -cert ca.crt -keyfile ca.key -notext -config openssl.cnf
  其中-notext表示不要把证书文件的明文内容输出到文件中去，否则在后面用keytool导入到keystore时会出错。
4)    导入信任的CA根证书到keystore
   keytool -import -v -trustcacerts  -alias my_ca_root -file ca.crt -storepass 123456 -keystore server_keystore
5)    把CA签名后的server端证书导入keystore
keytool -import -v -alias tomcat_server -file tomcat_server.crt -storepass 123456 -keystore server_keystore
6)    查看server端证书
   keytool -list -v -keystore server_keystore  
 可以看到tomcat_server的证书链长度是2
 
4.    生成client端证书
1)    生成客户端CSR
   openssl genrsa -aes256 -out tomcat_client.key 1024
openssl req -new -key tomcat_client.key -out tomcat_client.csr -config openssl.cnf
2)    用CA私钥进行签名，也可以到权威机构申请CA签名
openssl ca -in tomcat_client.csr -out tomcat_client.crt -cert ca.crt -keyfile ca.key -notext -config openssl.cnf
3)    生成PKCS12格式证书
openssl pkcs12 -export -inkey tomcat_client.key -in tomcat_client.crt -out  tomcat_client.p12
4)    使用Keytool列出pkcs12证书的内容：
   keytool -rfc -list -keystore tomcat_client.p12 -storetype pkcs12


二）openssl生成私钥文件(.key)和签名请求文件(.csr)，以及签发数字证书

操作目录是openssl/bin（没办法改不了环境变量，如果你可以改的话，就不用在这个目录下工作了），为了方便本人把apps下的openssl.cnf也复制到了这个目录下来。文件名都是以本人使用的来说了：
1.首先要生成服务器端的私钥(key文件):
openssl genrsa -aes128 -out server.key 1024
运行时会提示输入密码,此密码用于加密key文件(参数des3便是指加密算法,当然也可以选用其他你认为安全的算法.),以后每当需读取此文件(通过openssl提供的命令或API)都需输入口令.如果觉得不方便,也可以去除这个口令,但一定要采取其他的保护措施!
去除key文件口令的命令:
openssl rsa -in server.key -out server.key

2.openssl req -new -key server.key -out server.csr -config openssl.cnf
生成Certificate Signing Request（CSR）,生成的csr文件交给CA签名后形成服务端自己的证书.屏幕上将有提示,依照其指示一步一步输入要求的个人信息即可.

3.对客户端也作同样的命令生成key及csr文件:
openssl genrsa -aes128 -out client.key 1024
openssl req -new -key client.key -out client.csr -config openssl.cnf

4.CSR文件必须有CA的签名才可形成证书.可将此文件发送到verisign等地方由它验证,要交一大笔钱,何不自己做CA呢.
openssl req -new -x509 -keyout ca.key -out ca.crt -config openssl.cnf

5.用生成的CA的证书为刚才生成的server.csr,client.csr文件签名:
openssl ca -in server.csr -out server.crt -cert ca.crt -keyfile ca.key -config openssl.cnf
openssl ca -in client.csr -out client.crt -cert ca.crt -keyfile ca.key -config openssl.cnf
(出现TXT_DB error则修改bin\demoCA下 index.txt.attr改unique_subject = yes为no)
现在我们所需的全部文件便生成了.

客户端证书转格式
openssl pkcs12 -export -clcerts -inkey client.key -in client.crt -out client.p12
//

(改tomcat配置，将bin下server.crt、server.key移到下面位置)
    <Connector port="8443" maxThreads="200" SSLEnabled="true" scheme="https" secure="true"
               clientAuth="optional" sslProtocol="TLSv1"
               SSLCertificateFile="/alidata/server/tomcat-7.0.54/conf/server.crt"
               SSLCertificateKeyFile="/alidata/server/tomcat-7.0.54/conf/server.key" />
//
若双向认证
    <Connector port="8443" 
               acceptCount="100" enableLookups="false" disableUploadTimeout="true"
               maxThreads="200" SSLEnabled="true" scheme="https" secure="true"
               clientAuth="true" sslProtocol="all"
               SSLCertificateFile="/alidata/server/tomcat-7.0.54/conf/server.crt"
               SSLCertificateKeyFile="/alidata/server/tomcat-7.0.54/conf/server.key"
               SSLCACertificateFile="/alidata/server/tomcat-7.0.54/conf/ca.crt"
               SSLCACertificatePath="/alidata/server/tomcat-7.0.54/conf"
               SSLPassword="123456"
               SSLVerifyClient="optional"
               SSLVerifyDepth="15"
               SSLCipherSuite="ALL"
            />

//
去掉这段
Nginx
在http{}中加入
	server { 
	server_name 120.24.76.184:8443;
	listen 8443; 
	ssl on; 
	ssl_certificate /alidata/server/tomcat-7.0.54/conf/server.crt; 
	ssl_certificate_key /alidata/server/tomcat-7.0.54/conf/server.key;
	ssl_client_certificate /alidata/server/tomcat-7.0.54/conf/ca.crt;
	ssl_session_timeout  5m; 
	ssl_verify_client on;
	ssl_prefer_server_ciphers on;
}

//
将server_keystore
移动到C:\Users\ASUS
cmd 敲入
keytool -exportcert -keystore server_keystore -alias tomcat_server -file localhost.cer
导出证书后在浏览器协议内导入该证书
//
记得在所有上述过程中 common name用域名localhost
//
另：
client使用的文件有：ca.crt,client.crt,client.key
server使用的文件有：ca.crt,server.crt,server.key
.crt文件和.key可以合到一个文件里面，本人把2个文件合成了一个.pem文件（直接拷贝过去就行了）
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
合并证书文件（crt）和私钥文件（key）：

＃cat client.crt client.key > client.pem
＃cat server.crt server.key > server.pem